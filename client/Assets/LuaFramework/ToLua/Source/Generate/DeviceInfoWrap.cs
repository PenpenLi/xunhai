//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DeviceInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DeviceInfo), typeof(System.Object));
		L.RegFunction("GetDeviceUID", GetDeviceUID);
		L.RegFunction("New", _CreateDeviceInfo);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("_instance", get__instance, set__instance);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDeviceInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				DeviceInfo obj = new DeviceInfo();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DeviceInfo.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDeviceUID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DeviceInfo obj = (DeviceInfo)ToLua.CheckObject(L, 1, typeof(DeviceInfo));
			string o = obj.GetDeviceUID();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, DeviceInfo._instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, DeviceInfo.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__instance(IntPtr L)
	{
		try
		{
			DeviceInfo arg0 = (DeviceInfo)ToLua.CheckObject(L, 2, typeof(DeviceInfo));
			DeviceInfo._instance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

