//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DrawUtilsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DrawUtils), typeof(System.Object));
		L.RegFunction("DrawLine", DrawLine);
		L.RegFunction("DrawRay", DrawRay);
		L.RegFunction("New", _CreateDrawUtils);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDrawUtils(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				DrawUtils obj = new DrawUtils();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DrawUtils.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawLine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Color arg2 = ToLua.ToColor(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			DrawUtils.DrawLine(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawRay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Color arg2 = ToLua.ToColor(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			DrawUtils.DrawRay(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

