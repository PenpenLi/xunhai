//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_TreeViewWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FairyGUI.TreeView), typeof(FairyGUI.EventDispatcher));
		L.RegFunction("GetSelectedNode", GetSelectedNode);
		L.RegFunction("GetSelection", GetSelection);
		L.RegFunction("AddSelection", AddSelection);
		L.RegFunction("RemoveSelection", RemoveSelection);
		L.RegFunction("ClearSelection", ClearSelection);
		L.RegFunction("GetNodeIndex", GetNodeIndex);
		L.RegFunction("UpdateNode", UpdateNode);
		L.RegFunction("UpdateNodes", UpdateNodes);
		L.RegFunction("ExpandAll", ExpandAll);
		L.RegFunction("CollapseAll", CollapseAll);
		L.RegFunction("New", _CreateFairyGUI_TreeView);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("indent", get_indent, set_indent);
		L.RegVar("treeNodeCreateCell", get_treeNodeCreateCell, set_treeNodeCreateCell);
		L.RegVar("treeNodeRender", get_treeNodeRender, set_treeNodeRender);
		L.RegVar("treeNodeWillExpand", get_treeNodeWillExpand, set_treeNodeWillExpand);
		L.RegVar("list", get_list, null);
		L.RegVar("root", get_root, null);
		L.RegVar("onClickNode", get_onClickNode, null);
		L.RegFunction("TreeNodeWillExpandDelegate", FairyGUI_TreeView_TreeNodeWillExpandDelegate);
		L.RegFunction("TreeNodeRenderDelegate", FairyGUI_TreeView_TreeNodeRenderDelegate);
		L.RegFunction("TreeNodeCreateCellDelegate", FairyGUI_TreeView_TreeNodeCreateCellDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFairyGUI_TreeView(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				FairyGUI.GList arg0 = (FairyGUI.GList)ToLua.CheckObject(L, 1, typeof(FairyGUI.GList));
				FairyGUI.TreeView obj = new FairyGUI.TreeView(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: FairyGUI.TreeView.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSelectedNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)ToLua.CheckObject(L, 1, typeof(FairyGUI.TreeView));
			FairyGUI.TreeNode o = obj.GetSelectedNode();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSelection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)ToLua.CheckObject(L, 1, typeof(FairyGUI.TreeView));
			System.Collections.Generic.List<FairyGUI.TreeNode> o = obj.GetSelection();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSelection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)ToLua.CheckObject(L, 1, typeof(FairyGUI.TreeView));
			FairyGUI.TreeNode arg0 = (FairyGUI.TreeNode)ToLua.CheckObject(L, 2, typeof(FairyGUI.TreeNode));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.AddSelection(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveSelection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)ToLua.CheckObject(L, 1, typeof(FairyGUI.TreeView));
			FairyGUI.TreeNode arg0 = (FairyGUI.TreeNode)ToLua.CheckObject(L, 2, typeof(FairyGUI.TreeNode));
			obj.RemoveSelection(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearSelection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)ToLua.CheckObject(L, 1, typeof(FairyGUI.TreeView));
			obj.ClearSelection();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNodeIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)ToLua.CheckObject(L, 1, typeof(FairyGUI.TreeView));
			FairyGUI.TreeNode arg0 = (FairyGUI.TreeNode)ToLua.CheckObject(L, 2, typeof(FairyGUI.TreeNode));
			int o = obj.GetNodeIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)ToLua.CheckObject(L, 1, typeof(FairyGUI.TreeView));
			FairyGUI.TreeNode arg0 = (FairyGUI.TreeNode)ToLua.CheckObject(L, 2, typeof(FairyGUI.TreeNode));
			obj.UpdateNode(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateNodes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)ToLua.CheckObject(L, 1, typeof(FairyGUI.TreeView));
			System.Collections.Generic.List<FairyGUI.TreeNode> arg0 = (System.Collections.Generic.List<FairyGUI.TreeNode>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<FairyGUI.TreeNode>));
			obj.UpdateNodes(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExpandAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)ToLua.CheckObject(L, 1, typeof(FairyGUI.TreeView));
			FairyGUI.TreeNode arg0 = (FairyGUI.TreeNode)ToLua.CheckObject(L, 2, typeof(FairyGUI.TreeNode));
			obj.ExpandAll(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CollapseAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)ToLua.CheckObject(L, 1, typeof(FairyGUI.TreeView));
			FairyGUI.TreeNode arg0 = (FairyGUI.TreeNode)ToLua.CheckObject(L, 2, typeof(FairyGUI.TreeNode));
			obj.CollapseAll(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_indent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)o;
			int ret = obj.indent;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index indent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_treeNodeCreateCell(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)o;
			FairyGUI.TreeView.TreeNodeCreateCellDelegate ret = obj.treeNodeCreateCell;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index treeNodeCreateCell on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_treeNodeRender(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)o;
			FairyGUI.TreeView.TreeNodeRenderDelegate ret = obj.treeNodeRender;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index treeNodeRender on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_treeNodeWillExpand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)o;
			FairyGUI.TreeView.TreeNodeWillExpandDelegate ret = obj.treeNodeWillExpand;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index treeNodeWillExpand on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_list(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)o;
			FairyGUI.GList ret = obj.list;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index list on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_root(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)o;
			FairyGUI.TreeNode ret = obj.root;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index root on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onClickNode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)o;
			FairyGUI.EventListener ret = obj.onClickNode;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onClickNode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_indent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.indent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index indent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_treeNodeCreateCell(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)o;
			FairyGUI.TreeView.TreeNodeCreateCellDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (FairyGUI.TreeView.TreeNodeCreateCellDelegate)ToLua.CheckObject(L, 2, typeof(FairyGUI.TreeView.TreeNodeCreateCellDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(FairyGUI.TreeView.TreeNodeCreateCellDelegate), func) as FairyGUI.TreeView.TreeNodeCreateCellDelegate;
			}

			obj.treeNodeCreateCell = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index treeNodeCreateCell on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_treeNodeRender(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)o;
			FairyGUI.TreeView.TreeNodeRenderDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (FairyGUI.TreeView.TreeNodeRenderDelegate)ToLua.CheckObject(L, 2, typeof(FairyGUI.TreeView.TreeNodeRenderDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(FairyGUI.TreeView.TreeNodeRenderDelegate), func) as FairyGUI.TreeView.TreeNodeRenderDelegate;
			}

			obj.treeNodeRender = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index treeNodeRender on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_treeNodeWillExpand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.TreeView obj = (FairyGUI.TreeView)o;
			FairyGUI.TreeView.TreeNodeWillExpandDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (FairyGUI.TreeView.TreeNodeWillExpandDelegate)ToLua.CheckObject(L, 2, typeof(FairyGUI.TreeView.TreeNodeWillExpandDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(FairyGUI.TreeView.TreeNodeWillExpandDelegate), func) as FairyGUI.TreeView.TreeNodeWillExpandDelegate;
			}

			obj.treeNodeWillExpand = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index treeNodeWillExpand on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_TreeView_TreeNodeWillExpandDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(FairyGUI.TreeView.TreeNodeWillExpandDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(FairyGUI.TreeView.TreeNodeWillExpandDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_TreeView_TreeNodeRenderDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(FairyGUI.TreeView.TreeNodeRenderDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(FairyGUI.TreeView.TreeNodeRenderDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_TreeView_TreeNodeCreateCellDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(FairyGUI.TreeView.TreeNodeCreateCellDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(FairyGUI.TreeView.TreeNodeCreateCellDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

