//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EndianWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("Endian");
		L.RegFunction("SwapInt16", SwapInt16);
		L.RegFunction("SwapUInt16", SwapUInt16);
		L.RegFunction("SwapInt32", SwapInt32);
		L.RegFunction("SwapUInt32", SwapUInt32);
		L.RegFunction("SwapInt64", SwapInt64);
		L.RegFunction("SwapUInt64", SwapUInt64);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwapInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 1);
			short o = Endian.SwapInt16(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwapUInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 1);
			ushort o = Endian.SwapUInt16(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwapInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = Endian.SwapInt32(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwapUInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 1);
			uint o = Endian.SwapUInt32(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwapInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 1);
			long o = Endian.SwapInt64(arg0);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwapUInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 1);
			ulong o = Endian.SwapUInt64(arg0);
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

