//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MicroPhoneInputWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MicroPhoneInput), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("getInstance", getInstance);
		L.RegFunction("StartRecord", StartRecord);
		L.RegFunction("StopRecord", StopRecord);
		L.RegFunction("GetClipData", GetClipData);
		L.RegFunction("GetVoiceData", GetVoiceData);
		L.RegFunction("PlayClipData", PlayClipData);
		L.RegFunction("Compress", Compress);
		L.RegFunction("DeCompress", DeCompress);
		L.RegFunction("ByteToHexStr", ByteToHexStr);
		L.RegFunction("PlayRecord", PlayRecord);
		L.RegFunction("GetAveragedVolume", GetAveragedVolume);
		L.RegFunction("GetRecordTime", GetRecordTime);
		L.RegFunction("IsRecording", IsRecording);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("sensitivity", get_sensitivity, set_sensitivity);
		L.RegVar("loudness", get_loudness, set_loudness);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			MicroPhoneInput o = MicroPhoneInput.getInstance();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartRecord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MicroPhoneInput obj = (MicroPhoneInput)ToLua.CheckObject(L, 1, typeof(MicroPhoneInput));
			obj.StartRecord();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopRecord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MicroPhoneInput obj = (MicroPhoneInput)ToLua.CheckObject(L, 1, typeof(MicroPhoneInput));
			obj.StopRecord();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetClipData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MicroPhoneInput obj = (MicroPhoneInput)ToLua.CheckObject(L, 1, typeof(MicroPhoneInput));
			LuaInterface.LuaByteBuffer o = obj.GetClipData();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVoiceData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			LuaInterface.LuaByteBuffer o = MicroPhoneInput.GetVoiceData();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayClipData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(MicroPhoneInput), typeof(short[])))
			{
				MicroPhoneInput obj = (MicroPhoneInput)ToLua.ToObject(L, 1);
				short[] arg0 = ToLua.CheckNumberArray<short>(L, 2);
				obj.PlayClipData(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(MicroPhoneInput), typeof(byte[])))
			{
				MicroPhoneInput obj = (MicroPhoneInput)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.PlayClipData(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MicroPhoneInput.PlayClipData");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Compress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MicroPhoneInput obj = (MicroPhoneInput)ToLua.CheckObject(L, 1, typeof(MicroPhoneInput));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			byte[] o = obj.Compress(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeCompress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MicroPhoneInput obj = (MicroPhoneInput)ToLua.CheckObject(L, 1, typeof(MicroPhoneInput));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			byte[] o = obj.DeCompress(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ByteToHexStr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MicroPhoneInput obj = (MicroPhoneInput)ToLua.CheckObject(L, 1, typeof(MicroPhoneInput));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			short[] o = obj.ByteToHexStr(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayRecord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MicroPhoneInput obj = (MicroPhoneInput)ToLua.CheckObject(L, 1, typeof(MicroPhoneInput));
			obj.PlayRecord();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAveragedVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MicroPhoneInput obj = (MicroPhoneInput)ToLua.CheckObject(L, 1, typeof(MicroPhoneInput));
			float o = obj.GetAveragedVolume();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRecordTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MicroPhoneInput obj = (MicroPhoneInput)ToLua.CheckObject(L, 1, typeof(MicroPhoneInput));
			float o = obj.GetRecordTime();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsRecording(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MicroPhoneInput obj = (MicroPhoneInput)ToLua.CheckObject(L, 1, typeof(MicroPhoneInput));
			bool o = obj.IsRecording();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sensitivity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MicroPhoneInput obj = (MicroPhoneInput)o;
			float ret = obj.sensitivity;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sensitivity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loudness(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MicroPhoneInput obj = (MicroPhoneInput)o;
			float ret = obj.loudness;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index loudness on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sensitivity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MicroPhoneInput obj = (MicroPhoneInput)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sensitivity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sensitivity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_loudness(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MicroPhoneInput obj = (MicroPhoneInput)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.loudness = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index loudness on a nil value" : e.Message);
		}
	}
}

